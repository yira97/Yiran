@using Blog.Admin.Helper
@using Blog.Admin.Middlewares
@using Blog.Admin.ViewComponents
@using Microsoft.AspNetCore.Mvc.TagHelpers
@{
    var activeNav = ViewData[ViewHelper.ViewData.ActiveNav] != null ? (string)ViewData[ViewHelper.ViewData.ActiveNav]! : RouteHelper.Controller.Home;
    var domainId = Context.GetDomainIdFromHttpContextItems();
    var levels = ViewData["Levels"] != null ? (BreadcrumbsDto)ViewData["Levels"]! : new BreadcrumbsDto(Links: new List<NavigationDto>());
    string NavIconClass(string nav) => activeNav == nav ? "text-gray-500" : "text-gray-400 group-hover:text-gray-500";
    string NavClass(string nav) => activeNav == nav ? "bg-gray-100 text-gray-900" : "text-gray-600 hover:text-gray-900 hover:bg-gray-50";
    // Current: "bg-gray-200 text-gray-900", Default: "text-gray-700 hover:text-gray-900 hover:bg-gray-50"
    string NavClassDesktop(string nav) => activeNav == nav ? "bg-gray-200 text-gray-900" : "text-gray-700 hover:text-gray-900 hover:bg-gray-50";
    var navItems = new List<string> { RouteHelper.Controller.Home, RouteHelper.Controller.Post, RouteHelper.Controller.Topic, RouteHelper.Controller.Category, RouteHelper.Controller.Contact, RouteHelper.Controller.Settings };
    var navLinks = new List<string>
    {
        Url.Action("Index", RouteHelper.Controller.Home, new { domainId = domainId })!,
        Url.Action("Index", RouteHelper.Controller.Post, new { domainId = domainId })!,
        Url.Action("Index", RouteHelper.Controller.Topic, new { domainId = domainId })!,
        Url.Action("Index", RouteHelper.Controller.Category, new { domainId = domainId })!,
        Url.Action("Index", RouteHelper.Controller.Contact, new { domainId = domainId })!,
        Url.Action("Index", RouteHelper.Controller.Settings, new { domainId = domainId })!,
    };
}
<!DOCTYPE html>
<html lang="en" class="h-full bg-white">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="~/css/tailwindcss.css" asp-append-version="true"/>
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true"/>
</head>
<body class="h-full">
<div x-data="modal">
<div x-data="{
       offCanvasMenuOpen: false,
     }"
     class="min-h-full">
    <!-- Off-canvas menu for mobile, show/hide based on off-canvas menu state. -->
    <div x-show="offCanvasMenuOpen" style="display: none" class="relative z-40 lg:hidden" role="dialog" aria-modal="true">
        <!-- Off-canvas menu backdrop, show/hide based on off-canvas menu state. -->
        <div
            x-show="offCanvasMenuOpen"
            x-transition:enter="transition-opacity ease-linear duration-300"
            x-transition:enter-start="opacity-0"
            x-transition:enter-end="opacity-100"
            x-transition:leave="transition-opacity ease-linear duration-300"
            x-transition:leave-start="opacity-100"
            x-transition:leave-end="opacity-0"
            class="fixed inset-0 bg-gray-600 bg-opacity-75">
        </div>

        <div class="fixed inset-0 z-40 flex">
            <!-- Off-canvas menu, show/hide based on off-canvas menu state. -->
            <div
                x-show="offCanvasMenuOpen"
                x-transition:enter="transition ease-in-out duration-300 transform"
                x-transition:enter-start="-translate-x-full"
                x-transition:enter-end="translate-x-0"
                x-transition:leave="transition ease-in-out duration-300 transform"
                x-transition:leave-start="translate-x-0"
                x-transition:leave-end="-translate-x-full"
                class="relative flex w-full max-w-xs flex-1 flex-col bg-white pt-5 pb-4">
                <!-- Close button, show/hide based on off-canvas menu state. -->
                <div
                    x-show="offCanvasMenuOpen"
                    x-transition:enter="ease-in-out duration-300"
                    x-transition:enter-start="opacity-0"
                    x-transition:enter-end="opacity-100"
                    x-transition:leave="ease-in-out duration-300"
                    x-transition:leave-start="opacity-100"
                    x-transition:leave-end="opacity-0"
                    class="absolute top-0 right-0 -mr-12 pt-2">
                    <button x-on:click="offCanvasMenuOpen = false" type="button" class="ml-1 flex h-10 w-10 items-center justify-center rounded-full focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white">
                        <span class="sr-only">Close sidebar</span>
                        <svg class="h-6 w-6 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"/>
                        </svg>
                    </button>
                </div>

                <div class="flex flex-shrink-0 items-center px-4">
                    <img class="h-8 w-auto" src="https://tailwindui.com/img/logos/mark.svg?color=purple&shade=500" alt="Your Company">
                </div>
                <div class="mt-5 h-0 flex-1 overflow-y-auto">
                    <nav class="px-2">
                        <div class="space-y-1">
                            @for (var i = 0; i < navItems.Count; i++)
                            {
                                var navItem = navItems[i];
                                var navLink = navLinks[i];
                                <a href="@navLink" class="@NavClass(navItems[i]) group flex items-center px-2 py-2 text-base leading-5 font-medium rounded-md" aria-current="page">
                                    <svg class="@NavIconClass(navItems[i]) mr-3 flex-shrink-0 h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M2.25 12l8.954-8.955c.44-.439 1.152-.439 1.591 0L21.75 12M4.5 9.75v10.125c0 .621.504 1.125 1.125 1.125H9.75v-4.875c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125V21h4.125c.621 0 1.125-.504 1.125-1.125V9.75M8.25 21h8.25"/>
                                    </svg>
                                    @navItem
                                </a>
                            }
                        </div>
                    </nav>
                </div>
            </div>

            <div class="w-14 flex-shrink-0" aria-hidden="true">
                <!-- Dummy element to force sidebar to shrink to fit close icon -->
            </div>
        </div>
    </div>

    <!-- Static sidebar for desktop -->
    <div class="hidden lg:fixed lg:inset-y-0 lg:flex lg:w-64 lg:flex-col lg:border-r lg:border-gray-200 lg:bg-gray-100 lg:pt-5 lg:pb-4">
        <div class="flex flex-shrink-0 items-center px-6">
            <img class="h-8 w-auto" src="https://tailwindui.com/img/logos/mark.svg?color=purple&shade=500" alt="Your Company">
        </div>
        <div class="mt-5 flex h-0 flex-1 flex-col overflow-y-auto pt-1">
            <!-- User account dropdown -->
            @(await Component.InvokeAsync<UserAccountDropDownViewComponent>())

            <!-- Sidebar Search -->
            <div class="mt-5 px-3">
                <label for="search" class="sr-only">Search</label>
                <div class="relative mt-1 rounded-md shadow-sm">
                    <div class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3" aria-hidden="true">
                        <svg class="mr-3 h-4 w-4 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                            <path fill-rule="evenodd" d="M9 3.5a5.5 5.5 0 100 11 5.5 5.5 0 000-11zM2 9a7 7 0 1112.452 4.391l3.328 3.329a.75.75 0 11-1.06 1.06l-3.329-3.328A7 7 0 012 9z" clip-rule="evenodd"/>
                        </svg>
                    </div>
                    <input type="text" name="search" id="search" class="block w-full rounded-md border-gray-300 pl-9 focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm" placeholder="Search">
                </div>
            </div>

            <!-- Domain Selection -->
            <div class="mt-5">
                <div class="px-3">
                    @(await Component.InvokeAsync<DomainSelectionViewComponent>(domainId))
                </div>
            </div>


            <!-- Navigation -->
            <nav class="mt-6 px-3">
                <div class="space-y-1">
                    @for (var i = 0; i < navItems.Count; i++)
                    {
                        var navItem = navItems[i];
                        var navLink = navLinks[i];
                        <!-- Current: "bg-gray-200 text-gray-900", Default: "text-gray-700 hover:text-gray-900 hover:bg-gray-50" -->
                        <a href="@navLink" class="@NavClassDesktop(navItem) group flex items-center px-2 py-2 text-sm font-medium rounded-md" aria-current="page">
                            <!--
                            Current: "text-gray-500", Default: "text-gray-400 group-hover:text-gray-500"
                            -->
                            <svg class="@NavIconClass(navItem) mr-3 flex-shrink-0 h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M2.25 12l8.954-8.955c.44-.439 1.152-.439 1.591 0L21.75 12M4.5 9.75v10.125c0 .621.504 1.125 1.125 1.125H9.75v-4.875c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125V21h4.125c.621 0 1.125-.504 1.125-1.125V9.75M8.25 21h8.25"/>
                            </svg>
                            @navItem
                        </a>
                    }
                </div>
            </nav>
        </div>
    </div>
    <!-- Main column -->
    <div class="flex flex-col lg:pl-64">
        <!-- Search header -->
        <div class="sticky top-0 z-10 flex h-16 flex-shrink-0 border-b border-gray-200 bg-white lg:hidden">
            <!-- Sidebar toggle, controls the 'sidebarOpen' sidebar state. -->
            <button x-on:click="offCanvasMenuOpen = true" type="button" class="border-r border-gray-200 px-4 text-gray-500 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-purple-500 lg:hidden">
                <span class="sr-only">Open sidebar</span>
                <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12H12m-8.25 5.25h16.5"/>
                </svg>
            </button>
            <div class="flex flex-1 justify-between px-4 sm:px-6 lg:px-8">
                <div class="flex flex-1">
                    <form class="flex w-full md:ml-0" action="#" method="GET">
                        <label for="search-field" class="sr-only">Search</label>
                        <div class="relative w-full text-gray-400 focus-within:text-gray-600">
                            <div class="pointer-events-none absolute inset-y-0 left-0 flex items-center">
                                <!-- Heroicon name: mini/magnifying-glass -->
                                <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                    <path fill-rule="evenodd" d="M9 3.5a5.5 5.5 0 100 11 5.5 5.5 0 000-11zM2 9a7 7 0 1112.452 4.391l3.328 3.329a.75.75 0 11-1.06 1.06l-3.329-3.328A7 7 0 012 9z" clip-rule="evenodd"/>
                                </svg>
                            </div>
                            <input id="search-field" name="search-field" class="block h-full w-full border-transparent py-2 pl-8 pr-3 text-gray-900 placeholder-gray-500 focus:border-transparent focus:placeholder-gray-400 focus:outline-none focus:ring-0 sm:text-sm" placeholder="Search" type="search">
                        </div>
                    </form>
                </div>
                <div class="flex items-center">
                    <!-- Profile dropdown -->
                    @(await Component.InvokeAsync<UserAccountDropDownViewComponent>("Type2"))
                </div>
            </div>
        </div>
        <main class="flex-1">
            @if (levels.Links.ToList().Count > 0)
            {
                <div class="px-4 sm:px-6 lg:px-8 mt-4">
                    @(await Component.InvokeAsync<BreadcrumbsViewComponent>(levels))
                </div>
            }
            @RenderBody()

        </main>
    </div>
</div>
<div x-show="showModal" style="display: none;" class="relative z-10" aria-labelledby="modal-title" role="dialog" aria-modal="true">
    <!--
    Background backdrop, show/hide based on modal state.
    
    Entering: "ease-out duration-300"
    From: "opacity-0"
    To: "opacity-100"
    Leaving: "ease-in duration-200"
    From: "opacity-100"
    To: "opacity-0"
    -->
    <div
        x-show="showModal"
        x-transition:enter="ease-out duration-300"
        x-transition:enter-start="opacity-0"
        x-transition:enter-end="opacity-100"
        x-transition:leave="ease-in duration-200"
        x-transition:leave-start="opacity-100"
        x-transition:leave-end="opacity-0"
        class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity">
    </div>


    <div class="fixed inset-0 z-10 overflow-y-auto">
        <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
            <!--
            Modal panel, show/hide based on modal state.
    
            Entering: "ease-out duration-300"
            From: "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
            To: "opacity-100 translate-y-0 sm:scale-100"
            Leaving: "ease-in duration-200"
            From: "opacity-100 translate-y-0 sm:scale-100"
            To: "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
            -->
            <div
                x-show="showModal"
                x-transition:enter="ease-out duration-300"
                x-transition:enter-start="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                x-transition:enter-end="opacity-100 translate-y-0 sm:scale-100"
                x-transition:leave="ease-in duration-200"
                x-transition:leave-start="opacity-100 translate-y-0 sm:scale-100"
                x-transition:leave-end="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                x-bind:class=" modal?.cancelText != null ? 'sm:max-w-lg' : 'sm:max-w-sm' "
                class="relative transform overflow-hidden rounded-lg bg-white px-4 pt-5 pb-4 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:p-6">
                <div x-bind:class=" modal?.type === 'danger' ? 'sm:flex sm:items-start' : '' ">
                    <div x-show="modal?.type === 'succeed'" class="mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-green-100">
                        <svg class="h-6 w-6 text-green-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12.75l6 6 9-13.5"/>
                        </svg>
                    </div>
                    <div x-show="modal?.type === 'danger'" class="mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10">
                        <svg class="h-6 w-6 text-red-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z"/>
                        </svg>
                    </div>

                    <div x-bind:class="modal?.type === 'danger' ? 'sm:mt-0 sm:ml-4 sm:text-left' : 'sm:mt-5'" class="mt-3 text-center sm:mt-5">
                        <h3 class="text-lg font-medium leading-6 text-gray-900" id="modal-title" x-text="modal?.title">MODAL_TITLE</h3>
                        <div class="mt-2">
                            <p class="text-sm text-gray-500" x-text="modal?.message">MODAL_MESSAGE</p>
                        </div>
                    </div>
                </div>


                <div x-show="modal?.type == 'succeed' && modal?.cancelText == null" class="mt-5 sm:mt-6">
                    <button x-on:click="modal?.confirmAction()" type="button" class="inline-flex w-full justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-base font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:text-sm">Go back to dashboard</button>
                </div>

                <div x-show="modal?.type == 'succeed' && modal?.cancelText != null" class="mt-5 sm:mt-6 sm:grid sm:grid-flow-row-dense sm:grid-cols-2 sm:gap-3">
                    <button x-on:click="modal?.confirmAction()" type="button" class="inline-flex w-full justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-base font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:col-start-2 sm:text-sm">Deactivate</button>
                    <button x-on:click="closeModal()" type="button" class="mt-3 inline-flex w-full justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-base font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:col-start-1 sm:mt-0 sm:text-sm">Cancel</button>
                </div>

                <div x-show="modal?.type == 'danger'" class="mt-5 sm:mt-4 sm:flex sm:flex-row-reverse">
                    <button x-on:click="modal?.confirmAction()" x-text="modal?.confirmText" type="button" class="inline-flex w-full justify-center rounded-md border border-transparent bg-red-600 px-4 py-2 text-base font-medium text-white shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 sm:ml-3 sm:w-auto sm:text-sm">Deactivate</button>
                    <button x-on:click="closeModal()" x-text="modal?.cancelText" type="button" class="mt-3 inline-flex w-full justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-base font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:mt-0 sm:w-auto sm:text-sm">Cancel</button>
                </div>
            </div>
        </div>
    </div>
</div>
</div>
<script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>
<script src="~/js/site.js" asp-append-version="true"></script>
<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('modal', () => ({
            showModal: false,
            modal: null,
            addModal(type, title, message, cancelText, confirmText, confirmAction) {
              this.modal = {
                type: type,
                title: title, 
                message: message, 
                cancelText: cancelText,
                confirmText: confirmText,
                confirmAction: confirmAction
              }
            },
            closeModal() {
              this.showModal = false; 
            },
            doConfirm() {
              this.modal?.confirmAction()
            },
            popUpDanger(title, message, cancelText, confirmText, formSelector) {
              console.log(title, message, cancelText, confirmText, formSelector)
              this.addModal(
                'danger',
                title,
                message,
                cancelText,
                confirmText,
                () => {
                  const form = document.querySelector(formSelector);
                  form.submit();
                }
              )
              this.showModal = true;
            },
            popUpSucceed(title, message, cancelText, confirmText, formSelector) {
              this.addModal(
                'succeed',
                title,
                message,
                cancelText,
                confirmText,
                () => {
                  const form = document.querySelector(formSelector);
                  form.submit();
                }
              )
              this.showModal = true;
            },
            popUpSucceedNoCancel(title, message, confirmText, formSelector) {
              this.addModal(
                'succeed',
                title,
                message,
                null,
                confirmText,
                () => {
                  const form = document.querySelector(formSelector);
                  form.submit();
                }
              )
              this.showModal = true;
            },
          }))
    })
</script>
@await RenderSectionAsync("Scripts", required: false)
</body>
</html>